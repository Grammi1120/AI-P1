class CornersProblem(search.SearchProblem):
    """
    This search problem finds paths through all four corners of a layout.
    """

    def __init__(self, startingGameState):
        """
        Stores the walls, pacman's starting position and corners.
        """
        self.walls = startingGameState.getWalls()
        self.startingPosition = startingGameState.getPacmanPosition()
        top, right = self.walls.height-2, self.walls.width-2
        self.corners = ((1,1), (1,top), (right, 1), (right, top))
        for corner in self.corners:
            if not startingGameState.hasFood(*corner):
                print('Warning: no food in corner ' + str(corner))
        self._expanded = 0 # DO NOT CHANGE; Number of search nodes expanded
        # Please add any code here which you would like to use
        # in initializing the problem
        "*** YOUR CODE HERE ***"

    def getStartState(self):
        """
        Returns the start state (in your state space, not the full Pacman state
        space)
        """
        return (self.startingPosition, (False, False, False, False))

    def isGoalState(self, state):
        """
        Returns whether this search state is a goal state of the problem.
        """
        return all(state[1])  # All four corners have been visited

    def getSuccessors(self, state):
        """
        Returns successor states, the actions they require, and a cost of 1.

        As noted in search.py:
            For a given state, this should return a list of triples, (successor,
            action, stepCost), where 'successor' is a successor to the current
            state, 'action' is the action required to get there, and 'stepCost'
            is the incremental cost of expanding to that successor
        """

        successors = []
        for action in [Directions.NORTH, Directions.SOUTH, Directions.EAST, Directions.WEST]:
            current_position, corners_visited = state
            x, y = current_position
            dx, dy = Actions.directionToVector(action)
            next_position = (int(x + dx), int(y + dy))
            next_corners_visited = list(corners_visited)
            for i, corner in enumerate(self.corners):
                if next_position == corner:
                    next_corners_visited[i] = True
            if not self.walls[next_position[0]][next_position[1]]:
                successors.append(((next_position, tuple(next_corners_visited)), action, 1))

        self._expanded += 1 # DO NOT CHANGE
        return successors

    def getCostOfActions(self, actions):
        """
        Returns the cost of a particular sequence of actions.  If those actions
        include an illegal move, return 999999.
        """
        if actions == None:
            return 999999
        x,y = self.startingPosition
        cost = 0
        for action in actions:
            dx, dy = Actions.directionToVector(action)
            x, y = int(x + dx), int(y + dy)
            if self.walls[x][y]:
                return 999999
            cost += 1
        return cost
